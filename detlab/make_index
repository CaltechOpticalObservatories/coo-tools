#!/bin/bash
# @file     make_deimos_index
# @brief    create index.html file
# @author   David Hale
#
# This appends non-existent entries to the index.html file,
# creating the file if it doesn't exist. It also creates
# the symlink to dygraph for web plotting.

PROJECT_NAME="deimos"

if [ -z $1 ]; then YEARDATE=`date +%Y%m%d`; else YEARDATE=$1; fi
YEAR=`date +%Y`
PUBLIC_HTML="/home/detlab/public_html"
SOURCE_DIR="/home/detlab/DEIMOS"
PROJECT_PATH=$PUBLIC_HTML"/"$PROJECT_NAME
SAVE_PATH=$PROJECT_PATH"/"$YEAR
YEAR_HTML=$SAVE_PATH"/index.html"
DYGRAPH_PUBLIC=$PUBLIC_HTML"/dygraph-combined.js"
DYGRAPH_SYMLINK0=$SAVE_PATH"/dygraph-combined.js"
DYGRAPH_SYMLINK1=$SAVE_PATH"/"$YEARDATE"/dygraph-combined.js"

# it's a new year...
if [ ! -e $SAVE_PATH ]
then
  mkdir $SAVE_PATH
fi

# if data directories don't exist then wait a minute and try again,
# up to 10 times before giving up
for RETRY in {1..10}
do
  if [ ! -e $SAVE_PATH"/"$YEARDATE ]
  then
    sleep 60
  else
    break
  fi
done
if [ $RETRY == 10 ]
then
  echo "failed to make "$PROJECT_NAME" index files because "$SAVE_PATH"/"$YEARDATE" does not exist"
  exit 1
fi

# create symlinks to dygraph if needed
# first symlink into year directory
if [ ! -e $DYGRAPH_SYMLINK0 ]
then
  ln -s $DYGRAPH_PUBLIC $DYGRAPH_SYMLINK0
fi
# then symlink into year month day directory
if [ ! -e $DYGRAPH_SYMLINK1 ]
then
  ln -s $DYGRAPH_PUBLIC $DYGRAPH_SYMLINK1
fi

# html file at year dir level with year month day entries
# html preamble (create file if needed)
if [ ! -e $YEAR_HTML ]
then
  echo "<!-- This file is automatically generated !-->" > $YEAR_HTML
  echo "<!-- Any manual edits will be lost        !-->" >> $YEAR_HTML
  echo "" >> $YEAR_HTML
  echo "<html>" >> $YEAR_HTML
  echo "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">" >> $YEAR_HTML
  echo "<head>" >> $YEAR_HTML
  echo "<style type="text/css">" >> $YEAR_HTML
  echo "</style>" >> $YEAR_HTML
  echo "</head>" >> $YEAR_HTML
  echo "<h3>DEIMOS data logs "$YEAR"</h3>" >> $YEAR_HTML
  echo "" >> $YEAR_HTML
fi

FIRSTTIME=1

# loop through every entry, extract the YYYY, MM, DD
# and create the html links for each
for i in $SAVE_PATH/$YEAR????
  do
    YEARDATE=`echo $i | awk -F"$YEAR/" '{print $2}'`   # YYYYMMDD (today)
    DATE=`echo $YEARDATE | awk -F"$YEAR" '{print $2}'` # MMDD
    MM=`echo $DATE | awk '{print substr($1,1,2)}'`     # MM
    DD=`echo $DATE | awk '{print substr($1,3,4)}'`     # DD

    # timestamp for today and previous two days
    TIMESTAMP0=`echo "$YEAR $MM $DD 00 00 00" | awk '{print mktime($1" "$2" "$3" "$4" "$5" "$6)}'`
    let TIMESTAMP1=$TIMESTAMP0-86400
    let TIMESTAMP2=$TIMESTAMP1-86400

    # yeardate (YYYYMMDD) for previous two days
    YEARDATE1=`echo $TIMESTAMP1 | awk '{print strftime("%Y%m%d", $1)}'`
    YEARDATE2=`echo $TIMESTAMP2 | awk '{print strftime("%Y%m%d", $1)}'`

    # if today isn't in the index.html file then add entry for it (and previous two days)
    cd $SAVE_PATH/$YEARDATE/
    if ! grep --quiet $YEARDATE $YEAR_HTML
    then

      # If this is a new month then insert a line break (looks better).
      # This "firsttime" business makes sure that LASTMONTH is defined.

      if [ $FIRSTTIME -eq 1 ]
      then

        # the 11th line from the YEAR_HTML file is the last line written
        LASTLINE=`sed '11q;d' $YEAR_HTML`
        # extract the month from that last line
        LASTMONTH=`echo $LASTLINE | awk -F"$YEAR" '{print substr ($2, 0, 2)}'`
        FIRSTTIME=0
      fi

      if [ ! -z $LASTMONTH ] && [ $LASTMONTH -ne $MM ]
      then
        sed -i "11i <br>" $YEAR_HTML
        FIRSTTIME=0
      fi

      sed -i "11i <a href=\"$YEARDATE\">$YEAR-$MM-$DD</a> <br>" $YEAR_HTML
      # create symlinks from each dated file to a generically named file,
      # for reading by index.html file.
      if [ ! -e temps.csv ]
      then
        if [ -e temps.$YEARDATE.csv ]
        then
          ln -s temps.$YEARDATE.csv  temps.csv
        else
          echo "No temps file in "$YEARDATE
        fi
      fi
      if [ ! -e press.csv ]
      then
        if [ -e press.$YEARDATE.csv ]
        then
            ln -s press.$YEARDATE.csv  press.csv
        else
            echo "No press file in "$YEARDATE
        fi
      fi
      if [ ! -e index.html ] || [ ! -s index.html ] ; then cp $SOURCE_DIR/index.html index.html; fi
    fi

    # last month inserted into .index file
    LASTMONTH=$MM

  done
